import os
import pathlib

print('Generating constants from godot source')
# path to the cloned godot repo
godot_path = pathlib.Path(os.environ['GODOT_PATH'])
print(f'GODOT_PATH: {godot_path}')

repl_path = pathlib.Path('addons/repl')
assert repl_path.is_dir(), 'Could not find repl dir. Run this from the project root.'

with open(godot_path / 'core/core_constants.cpp', 'r') as f:
    lines = f.readlines()

constants = set()
# literally just pattern match to get the constants
for line in lines:
    if '#define' in line:
        continue
    if 'BIND_CORE_ENUM_CONSTANT_CUSTOM(' in line:
        constant = line.split('(')[1].split(',')[0].strip('"')
        constants.add(constant)
    elif 'BIND_CORE_ENUM_CONSTANT(' in line:
        constant = line.split('(')[1].split(')')[0].strip('"')
        constants.add(constant)
    elif 'BIND_CORE_BITFIELD_FLAG(' in line:
        constant = line.split('(')[1].split(')')[0].strip('"')
        constants.add(constant)
    elif 'BIND_CORE_ENUM_CLASS_CONSTANT(' in line:
        a, b, c = line.split(',')
        constant = b.strip() + '_' + c.strip(';)\n ')
        constants.add(constant)

assert 'SIDE_LEFT' in constants
assert 'KEY_NONE' in constants
assert 'TYPE_NIL' in constants
assert 'OP_EQUAL' in constants

constants = sorted(list(constants))

cwd = os.getcwd()
os.chdir(godot_path)
import subprocess
git_tag = subprocess.check_output(['git', 'describe', '--exact-match', '--tags']).decode('utf-8').strip()
git_hash = subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode('utf-8').strip()
os.chdir(cwd)

output_path = repl_path / 'repl_constants.gd'
with open(output_path, 'w') as f:
    f.write(f"""class_name ReplConstants
extends Resource

## All godot constants. Generated by scripts/generate_constants.py
## Godot Repo Tag: {git_tag}
## Godot commit: {git_hash}

const constants = {{
""")
    for constant in constants:
        f.write(f'\t"{constant}": {constant},\n')
    f.write("}")
